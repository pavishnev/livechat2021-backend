// <auto-generated />
using System;
using LiveChat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LiveChat.Data.Migrations
{
    [DbContext(typeof(LiveChatDbContext))]
    [Migration("20210801151510_Sessions-ChatLogs-Tables")]
    partial class SessionsChatLogsTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiveChat.Data.Entities.ChatLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSentByClient")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatLogs");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.PasswordChangeToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordChangeTokens");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("StartedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("WebsiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("WebsiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.Website", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.ChatLog", b =>
                {
                    b.HasOne("LiveChat.Data.Entities.Session", "Session")
                        .WithMany("ChatLogs")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiveChat.Data.Entities.User", "User")
                        .WithMany("ChatLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.PasswordChangeToken", b =>
                {
                    b.HasOne("LiveChat.Data.Entities.User", "User")
                        .WithMany("PasswordChangeTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.Session", b =>
                {
                    b.HasOne("LiveChat.Data.Entities.Website", "Website")
                        .WithMany("Sessions")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.User", b =>
                {
                    b.HasOne("LiveChat.Data.Entities.Website", "Website")
                        .WithMany("Users")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.Session", b =>
                {
                    b.Navigation("ChatLogs");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.User", b =>
                {
                    b.Navigation("ChatLogs");

                    b.Navigation("PasswordChangeTokens");
                });

            modelBuilder.Entity("LiveChat.Data.Entities.Website", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
